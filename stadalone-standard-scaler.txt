import numpy as np

class StandaloneStandardScaler:
    def __init__(self):
        self.mean_ = None
        self.var_ = None
        self.scale_ = None

    def fit(self, X):
        """Compute the mean and std to be used for later scaling."""
        self.mean_ = np.mean(X, axis=0)
        self.var_ = np.var(X, axis=0)
        self.scale_ = np.sqrt(self.var_)
        return self

    def transform(self, X):
        """Scale the data."""
        if self.mean_ is None or self.scale_ is None:
            raise ValueError("The scaler has not been fitted yet.")
        
        return (X - self.mean_) / self.scale_

    def fit_transform(self, X):
        """Fit to data, then transform it."""
        return self.fit(X).transform(X)

    def inverse_transform(self, X):
        """Scale back the data to the original representation."""
        if self.mean_ is None or self.scale_ is None:
            raise ValueError("The scaler has not been fitted yet.")
        
        return X * self.scale_ + self.mean_

# Let's test the implementation
data = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]])
scaler = StandaloneStandardScaler()
scaled_data = scaler.fit_transform(data)
scaled_data, scaler.inverse_transform(scaled_data)
